// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// cd prisma
// npx prisma migrate dev --name add-coach
// npx prisma studio
// npx prisma generate
// npx prisma migrate reset

// npx prisma migrate status
// npx prisma migrate dev

// npx prisma migrate deploy       for production

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  COACH
  ADMIN
}

model User {
  id        String   @id @default(uuid()) @db.Uuid  
  username  String
  email     String   @unique
  password  String   
  role      Role     @default(USER)
  isBlocked Boolean  @default(false)
  createdAt DateTime @default(now())

  coachId      String?       @db.Uuid
  coach        User?         @relation("UserCoach", fields: [coachId], references: [id], onDelete: SetNull)

   // Relationships to other features
  clients      User[]        @relation("UserCoach")
  coachProfile CoachProfile? @relation("CoachProfileUser")  
  
  
  @@index([email])
}

model CoachProfile {
  id         String   @id @default(uuid()) @db.Uuid
  bio        String
  expertise  String?   // Example: Fitness, Nutrition
  userId     String?   @unique @db.Uuid // Allows nullability for flexibility
  user       User?     @relation("CoachProfileUser", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Category {
  id          Int      @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Tag {
  id          Int      @id @default(autoincrement())
  name String @unique
  products ProductTag[]
}

model ProductTag {
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  tag       Tag @relation(fields: [tagId], references: [id])
  tagId     Int      

  @@id([productId, tagId]) // Prevents duplicate product-tag pairs
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  photo       String?
  price       Float
  inStock     Boolean
  quantity    Int
  tags        ProductTag[]
  category    Category? @relation(fields: [categoryId], references: [id]) // make relation optional
  categoryId  Int?                                           // make FK nullable
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Diary {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  userId      String?   @unique @db.Uuid
  waterIntake Float
  energyLevel Int
  sleepQuality Int
  mood        Int
  meals       Meal[]
}

model Meal {
  id      Int    @id @default(autoincrement())
  meal    String
  grams   Int
  type    String
  notes   String
  diaryId Int
  diary   Diary @relation(fields: [diaryId], references: [id])
}
